import { highlightCode } from "$lib/highlightCode";
import { encodeOpenGraphImage } from "$lib/og";
import type { PageServerLoad } from "./$types";

export const load: PageServerLoad = ({ locals }) => ({
  title: "Abstracting away the APIs - @serwist/sw",
  ogImage: encodeOpenGraphImage({
    title: "Abstracting away the APIs",
    desc: "@serwist/sw",
  }),
  toc: [
    {
      title: "Abstracting away the APIs",
      id: "abstractions",
      children: [
        {
          title: "Introduction",
          id: "introduction",
        },
        {
          title: "Usage",
          id: "usage",
          children: [
            {
              title: "Customizing the behaviour",
              id: "customizing-the-behaviour",
            },
          ],
        },
      ],
    },
  ],
  code: {
    basicUsage: {
      setup: highlightCode(
        locals.highlighter,
        {
          "sw.ts": {
            code: `import { Serwist } from "@serwist/sw";

declare const self: ServiceWorkerGlobalScope;

const serwist = new Serwist();

serwist.install();`,
            lang: "typescript",
          },
        },
        { idPrefix: "basic-usage" },
      ),
      customizing: highlightCode(
        locals.highlighter,
        {
          "sw.ts": {
            code: `import type { SerwistGlobalConfig } from "@serwist/core";
import { Serwist } from "@serwist/sw";
import { type PrecacheEntry, PrecacheController } from "@serwist/sw/precaching";
import { Router } from "@serwist/sw/routing";
// Where you import this depends on your stack
import { defaultCache } from "@serwist/vite/worker";

declare global {
  interface WorkerGlobalScope extends SerwistGlobalConfig {
    // Change this attribute's name to your \`injectionPoint\`.
    // \`injectionPoint\` is an InjectManifest option.
    // See https://serwist.pages.dev/docs/build/inject-manifest/configuring
    __SW_MANIFEST: (PrecacheEntry | string)[] | undefined;
  }
}

declare const self: ServiceWorkerGlobalScope;

const precacheController = new PrecacheController({
  concurrentPrecaching: 10,
});
const router = new Router();

// Example: Setting up offline fallbacks.
router.setCatchHandler(async ({ request }) => {
  const pageFallback = "/offline.html";
  const imageFallback = "/fallback.png";
  const fontFallback = "/fonts/fallback.woff2";
  const dest = request.destination;
  const cache = await self.caches.open("serwist-offline-fallbacks");

  if (dest === "document") {
    const match = (await precacheController.matchPrecache(pageFallback)) || (await cache.match(pageFallback));
    return match || Response.error();
  }

  if (dest === "image" && imageFallback !== undefined) {
    const match = (await precacheController.matchPrecache(imageFallback)) || (await cache.match(imageFallback));
    return match || Response.error();
  }

  if (dest === "font" && fontFallback !== undefined) {
    const match = (await precacheController.matchPrecache(fontFallback)) || (await cache.match(fontFallback));
    return match || Response.error();
  }

  return Response.error();
});

// Like for the \`Serwist\` class, you have to provide your custom \`Router\` and \`PrecacheController\`
// instances to \`Router\`-dependent and \`PrecacheController\`-dependent functions
// respectively. To avoid this, you can change the singleton \`Router\` and \`PrecacheController\`
// instances instead:
// import { setSingletonPrecacheController } from "@serwist/sw/precaching";
// import { setSingletonRouter } from "@serwist/sw/routing";
// setSingletonPrecacheController(precacheController);
// setSingletonRouter(router);
// With this, you no longer need to pass the instances to the \`Serwist\` class. They will be picked up
// automatically.
const serwist = new Serwist({
  precacheController,
  router,
});

serwist.install({
  // A list of URLs that should be cached. Usually, you don't generate
  // this list yourself; rather, you'd rely on a Serwist build tool/your framework
  // to do it for you. In this example, it is generated by \`@serwist/vite\`.
  precacheEntries: self.__SW_MANIFEST,
  // Options to customize how Serwist precaches the URLs.
  precacheOptions: {
    ignoreURLParametersMatching: [],
  },
  // Whether outdated caches should be removed.
  cleanupOutdatedCaches: true,
  // Whether the service worker should skip waiting and become the active one.
  skipWaiting: true,
  // Whether the service worker should claim any currently available clients.
  clientsClaim: true,
  // Whether navigation preloading should be used.
  navigationPreload: false,
  // Whether Serwist should log in development mode.
  disableDevLogs: true,
  // A list of runtime caching entries. When a request is made and its URL match
  // any of the entries, the response to it will be cached according to the matching
  // entry's \`handler\`. This does not apply to precached URLs.
  runtimeCaching: defaultCache,
  // Other options...
  // See https://serwist.pages.dev/docs/sw/abstractions/serwist
});`,
            lang: "typescript",
          },
        },
        { idPrefix: "customizing-the-behaviour" },
      ),
    },
  },
});
